 /** 
{% if Entity['Rol'] %}   * @PreAuthorize("hasRole('{{ Entity['Rol'] }}')")
{% endif %}
   * @Route("/{id}", requirements={"id" = "\d+"})
   * @Method({"POST"})
   * @ParamConverter("{{ Entity['Name'] | lower }}", class="{{ Bundle['Name'] }}:{{ Entity['Name'] }}")
   * @ApiDoc(
   *  description="Actualiza un {{ Entity['Name'] }}",
   *  section="{{ Entity['Name'] }}",
   *  resource=true,
   *  tags={
   *    "a revisar: Dev" = "#5bc0de"
   *  }
   * )
   */
  public function updateAction(Request $request, ${{ Entity['Name'] | lower }})
  {
    $validator = $this->get('hades.json_schema.validator');

    $schema = $this->get('kernel')->locateResource('@{{ Bundle['Name'] }}/Schema/Update/{{ Entity['Name'] }}Schema.json');
    $schema = $this->get('hades.json_schema.uri_retriever')->retrieve('file://'. $schema);
    
    if (!$validator->isValid(json_decode($request->getContent()), $schema)) 
    {
        $errors = $validator->getErrors();

        foreach ($errors as $error) 
        {
          $errorMessages[] = (string)$error;
        }

        return new JsonResponse($errorMessages, 400);
    }

    $context = new \JMS\Serializer\DeserializationContext();
    $context->attributes->set('target', ${{ Entity['Name'] | lower }});

    ${{ Entity['Name'] | lower }} = $this->serializer->deserialize($request->getContent(), '{{ Entity['Metadata'].getName() }}', 'json', $context);
    
    $errors = $this->get('validator')->validate(${{ Entity['Name'] | lower }});
    if (count($errors) > 0) 
    {
        foreach ($errors->getIterator() as $error) 
        {
            $errorMessages[$error->getProperty()] = $error->getViolation();
        }

        return new JsonResponse($errorMessages, 400);
    }

    $this->get('lube_generator.association_immutabilizer')->markAssociationsReadOnly(${{ Entity['Name'] | lower}});

    $this->em->merge(${{ Entity['Name'] | lower}});
    $this->em->flush();

    return new JsonResponse($this->utils->serializeByGroup(${{ Entity['Name'] | lower }}, ['detailed'], false));
  }
