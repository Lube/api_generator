 /** 
{% if Entity['Rol'] %}   * @PreAuthorize("hasRole('{{ Entity['Rol'] }}')")
{% endif %}
   * @Route("")
   * @Method({"GET"})
   * @ApiDoc(description="Devueve un/a lista de {{ Entity['Name'] }}s, la ruta indica los items a devolver")
   */
  public function cgetAction(Request $request) 
  {

      $offset = $request->query->get('offset',    null);
      $limit  = $request->query->get('limit',     null);
      $filterSchema = json_decode($request->query->get('filter_by', '{}'));
      $filterArray = json_decode($request->query->get('filter_by', '{}'), true);
      $orderArray = json_decode($request->query->get('order_by', '{}'), true);

      if (count($filterArray) > 0)
      {
        $validator = $this->get('hades.json_schema.validator');
        $schema = $this->get('hades.json_schema.uri_retriever')->retrieve('file://../Schema/Filter/{{ Entity['Name'] }}Schema.json');

        if (!$validator->isValid($filterSchema, $schema)) 
        {
            $errors = $validator->getErrors();

            foreach ($errors as $error) 
            {
              $errorMessages[] = (string)$error;
            }

            return new JsonResponse($errorMessages, 400);
        }
      }

      ${{ Entity['Name'] | lower }}s  = $this->em->getRepository('{{ Bundle['Name'] }}:{{ Entity['Name'] }}')->findBy($filterArray, $orderArray, $limit, $offset);

      $Response['data']   = json_decode($this->serializer->serialize(${{ Entity['Name'] | lower }}s, 'json'));
      $Response['total']  = count($this->em->getRepository('{{ Bundle['Name'] }}:{{ Entity['Name'] }}')->findBy($filterArray));

      return new JsonResponse($Response);
  }