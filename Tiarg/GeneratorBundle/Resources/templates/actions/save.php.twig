 /** 
{% if Entity['Rol'] %}   * @PreAuthorize("hasRole('{{ Entity['Rol'] }}')")
{% endif %}
   * @Route(" ")
   * @Method({"POST"})
   * @ApiDoc(
   *  description="Crea un/a {{ Entity['Name'] }}"
   * )
   */
  public function saveAction(Request $request)
  {
    $validator = $this->get('hades.json_schema.validator');
    $schema = $this->get('hades.json_schema.uri_retriever')->retrieve('file://{{ Bundle['Path'] }}Schema/Save/{{ Entity['Name'] }}Schema.json');

    if (!$validator->isValid(json_decode($request->getContent()), $schema)) 
    {
        $errors = $validator->getErrors();

        foreach ($errors as $error) 
        {
          $errorMessages[] = (string)$error;
        }

        return new JsonResponse($errorMessages, 400);
    }

    ${{ Entity['Name'] | lower }} = $this->serializer->deserialize($request->getContent(), '{{ Entity['Metadata'].getName() }}', 'json');
    
    $errors = $this->get('validator')->validate(${{ Entity['Name'] | lower }});
    if (count($errors) > 0) 
    {
        foreach ($errors->getIterator() as $error) 
        {
            $errorMessages[] = $error->getMessage();
        }

        return new JsonResponse($errorResponse, 400);
    }
    $this->get('tiarg_generator.association_immutabilizer')->markAssociationsReadOnly(${{ Entity['Name'] | lower}});

    $this->em->persist(${{ Entity['Name'] | lower}});
    $this->em->flush();

    return new JsonResponse(json_decode($this->serializer->serialize(${{ Entity['Name'] | lower }}, 'json')));
  }